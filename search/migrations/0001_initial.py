# Generated by Django 4.2.4 on 2023-08-19 03:59

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('youtube', '0003_alter_creator_thumbnail_url'),
    ]

    operations = [
        migrations.CreateModel(
            name='CategoryIngredients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'search_category_ingredients',
            },
        ),
        migrations.CreateModel(
            name='Ingredients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('aligned_name', models.CharField(max_length=255, null=True)),
                ('is_valid', models.BooleanField(default=False)),
                ('is_not_connected', models.BooleanField(default=False)),
                ('category', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='category_ingredients', to='search.categoryingredients')),
            ],
            options={
                'db_table': 'search_ingredients',
            },
        ),
        migrations.CreateModel(
            name='Ingredients_Youtube',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredients', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.ingredients')),
                ('youtube', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='youtube.youtube')),
            ],
        ),
        migrations.AddField(
            model_name='ingredients',
            name='youtube',
            field=models.ManyToManyField(related_name='ingredients', through='search.Ingredients_Youtube', to='youtube.youtube'),
        ),
    ]
